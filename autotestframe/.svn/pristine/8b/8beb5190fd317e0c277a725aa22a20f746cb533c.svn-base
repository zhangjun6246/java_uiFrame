package com.globalegrow.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

public class FileUtil {
	
    /**
     * 读取text文件内容
     * @param filePath
     * @return
     */
    public static List<String>  readTxtFile(String filePath){
    	List<String> result = new ArrayList<String>();
        try {
            String encoding="UTF-8";
            File file=new File(filePath);
            if(file.isFile() && file.exists()){ 
                InputStreamReader read = new InputStreamReader(new FileInputStream(file),encoding);
                BufferedReader bufferedReader = new BufferedReader(read);
                String lineTxt = null;
                while((lineTxt = bufferedReader.readLine()) != null){  
                	result.add(lineTxt);  
                }
                
                for(String ss: result){
                	Log.logInfo("appium启动日志文件内容:"+ss);
                }                
               read.close();
        }else{
            Log.logInfo("找不到指定的文件:"+filePath);
        }
        } catch (Exception e) {
        	Log.logInfo("读取文件内容出错:"+filePath);
            e.printStackTrace();
        }
		return result;    
    }
    
    /**
     * 获取文件下的目录名称，无排序
     * @param path
     * @return
     * @author linchaojiang
     */
    public static List<String> getFileName(String path) {
 	   List<String> fileName = new ArrayList<String>();
 	   File f = new File(path);
 	   if (!f.exists()) {
 	       System.out.println(path + " not exists");
 	    }	    
 	   File fa[] = f.listFiles();
 	   if(fa.length>0){
 		  for (int i = 0; i < fa.length; i++) {
 	 	       File fs = fa[i];
 	 	       if(!(fs.getName().equals("index.html")||fs.getName().equals("screenShot")||fs.getName().equals("left.html"))){
 	 	    	  fileName.add(fs.getName());
 	 	       }       
 	 	   } 
 	   }	   
	   return fileName;
 	}
    
    /**
     * 获取目录下文件夹名称，安时间倒序排序
     * @param fliePath
     * @author linchaojiang
     */
	public static List<String> getFileName_orderByDate(String fliePath) { 
		
		List<String> fileName = new ArrayList<String>();
		try {
			File file = new File(fliePath);  
			File[] fs = file.listFiles();  
			Arrays.sort(fs,new Comparator< File>(){  
				public int compare(File f1, File f2) {
				    long diff = f1.lastModified() - f2.lastModified();  
				    if (diff > 0) 
				        return 1;  
				    else if (diff == 0)  
				        return 0;  
				    else  
				        return -1;  
			    } 			
			    public boolean equals(Object obj) { 	    	
				    return true;  
				}  		          
			}); 		
			for (int i = fs.length-1; i >-1; i--) { 			
				if(!(fs[i].getName().equals("index.html")||fs[i].getName().equals("screenShot")||fs[i].getName().equals("left.html")||fs[i].getName().equals(".svn"))){
					fileName.add(fs[i].getName());
			       }    
			    //System.out.println(new Date(fs[i].lastModified()));  
			 }
		} catch (Exception e) {
			e.printStackTrace();
			Log.logInfo("获取目录:"+fliePath+",文件名称异常，请检查目录是否正确！！！");
		}
		return fileName;  
	} 
	
	/**
	 * 删除文件夹及下的文件
	 * @param filepath
	 * @author linchaojiang
	 */
	public static void delDirectoryAndFile(String filepath) { 
		
		try {
			File f = new File(filepath);//定义文件路径         
			if(f.exists() && f.isDirectory()){//判断是文件还是目录  
			   if(f.listFiles().length==0){//若目录下没有文件则直接删除  
			      f.delete();  
			   }else{//若有则把文件放进数组，并判断是否有下级目录  
			       File delFile[]=f.listFiles();  
			       int i =f.listFiles().length;  
			       for(int j=0;j<i;j++){  
			           if(delFile[j].isDirectory()){  
			        	   delDirectoryAndFile(delFile[j].getAbsolutePath());//递归调用del方法并取得子目录路径  
			           }
			           delFile[j].delete();//删除文件  
			         }  
			    }  
			}
		} catch (Exception e) {
			e.printStackTrace();
			Log.logInfo("删除文件夹及文件夹下文件异常,删除的目录为:"+filepath);
		}      
	} 
	
	/** 
     * 新建目录       
     * @param path 文件路径 
     * @throws Exception
     * @author linchaojiang 
     */  
    public static void makeDirs(String path) {  
        if (StringUtils.isEmpty(path)) {  
            return;  
        }  
        try {    
            File f = new File(path);  // 获得文件对象  
            if (!f.exists()) {                
                f.mkdirs(); // 如果路径不存在,则创建  
            }  
        } catch (Exception e) {  
            System.out.println("创建目录错误.path=" + path);  
            throw e;  
        }  
    }
    
    /** 
     * 删除单个文件 
     * @param   sPath    被删除文件的文件名 
     * @return 单个文件删除成功返回true，否则返回false 
     * @author linchaojiang
     */  
    public static boolean deleteFile(String sPath) {  
        boolean flag = false;
        try {
        	File file = new File(sPath);  
            // 路径为文件且不为空则进行删除  
            if (file.isFile() && file.exists()) {  
                file.delete();  
                flag = true;  
            }else {
            	flag = true;
 			}  
 		} catch (Exception e) {
 			flag = false;
 			e.printStackTrace();
 			Log.logInfo("删除文件异常！！！");
 		}       
        return flag;  
    } 
          
    /**
     * 获取目录下所有文件(按时间排序,由近及远)
     * @param path
     * @return List
     * @author linchaojiang
     */
    public static List<File> getFileSort(String path) {

        List<File> list = getFiles(path, new ArrayList<File>());

        if (list != null && list.size() > 0) {

            Collections.sort(list, new Comparator<File>() {
                public int compare(File file, File newFile) {
                    if (file.lastModified() < newFile.lastModified()) {
                        return 1;
                    } else if (file.lastModified() == newFile.lastModified()) {
                        return 0;
                    } else {
                        return -1;
                    }

                }
            });

        }

        return list;
    }
    
    /** 
     * 获取目录下所有文件 
     * @param realpath
     * @param files
     * @return List
     * @author linchaojiang
     */
    public static List<File> getFiles(String realpath, List<File> files) {

        File realFile = new File(realpath);
        if (realFile.isDirectory()) {
            File[] subfiles = realFile.listFiles();
            for (File file : subfiles) {       	   
                if (!file.isDirectory()) {
             	   files.add(file);
                }              
                //如果需要递归路径下的所有目录，用以下方法把文件添加到list中
               /* if (file.isDirectory()) {
                    getFiles(file.getAbsolutePath(), files);
                } else {
                    files.add(file);
                }*/
            }
        }
        return files;
    }   	
	
	 /**
	  * 通过递归得到某一路径下所有的目录及其文件
	  */
	public static ArrayList<String> getFiles_01(String filePath){
		 ArrayList<String> filelist = new ArrayList<String>();
		 ArrayList<String> fileNameList = new ArrayList<String>();
		 File root = new File(filePath);		  
		 File[] files = root.listFiles();
		 for(File file:files){
		     if(file.isDirectory()){//递归调用
		    	 getFiles_01(file.getAbsolutePath());
		     filelist.add(file.getAbsolutePath());
		     }else{
		    	 if((!file.getName().endsWith("index.html"))&&(!file.getName().endsWith("left.html"))){
		    		 fileNameList.add(file.getName());
		    	 }	    	 
		    }     
		 }
		 /*for(int i=fileNameList.size()-1;i>=0;i--){
			 System.out.println(fileNameList.get(i));
		 }*/
		return fileNameList;
	}
	
   /**  
    * 追加文件：使用FileOutputStream，在构造FileOutputStream时，把第二个参数设为true  ，在原有文件的末尾增加文件  
    * @param fileName  
    * @param content  
    * @return 
    * @author linchaojiang
    */   
   public  static   void  writeMsgToFile(String file, String conent) {  
       BufferedWriter out = null ;  
       try  {  
           out = new  BufferedWriter( new  OutputStreamWriter(  
                   new  FileOutputStream(file,  true )));  
           out.write(conent);  
       } catch  (Exception e) {  
           e.printStackTrace();
       } finally  {  
           try  {  
               out.close();  
           } catch  (IOException e) {  
               e.printStackTrace();  
           }  
       }  
   } 
    
   /**
    * 创建文件
    * @param path
    * @param fileName
    * @throws IOException
    */
   public static void createFile(String path,String fileName){
   	File file = new File(path);
		File file2 = new File(path+fileName);
		if(!file.exists()){//如果文件夹不存在，创建文件夹
			try {
				file .mkdir();
				if(!file2.exists()){//如果文件不存在，创建文件					
					file2.createNewFile();//创建文件
				}
				//file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}else{
			if(!file2.exists()){//如果文件不存在，创建文件					
				try {
					file2.createNewFile();//创建文件
				} catch (IOException e) {
					e.printStackTrace();
					System.out.println("创建文件异常！！！");
				}
			}
		}
   }
    
}
