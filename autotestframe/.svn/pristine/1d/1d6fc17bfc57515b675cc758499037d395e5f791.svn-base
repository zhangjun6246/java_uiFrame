package com.globalegrow.base;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.globalegrow.code.AndroidAppLocator;
import com.globalegrow.util.Log;
import com.globalegrow.util.OpAndroid;
import com.globalegrow.util.OpApp;
import com.globalegrow.util.PropUtil;

import io.appium.java_client.android.AndroidDriver;

@SuppressWarnings("rawtypes")
public class StartAndroidApp {
	
	protected static AndroidDriver driver;
	protected AndroidAppLocator locator;
	public static OpApp opApp;
	
	protected static String projectName = "";
	public static Map<String, List> testCasemap = new HashMap<String, List>();// 存放excel的数据
	public static String screenShotPath = "test-output/html-report/screenShot/";// 截图路径
	public String moduleName = "";// 模块名称
	protected int pageLoadTimeoutMax = 65;
	
	public static String testDescription = ""; //测试描述
	public static String testCheckpoint = ""; //验证点
	public static boolean correFail = false; //关联失败标志
	
	public static AndroidDriver getDriver() {
		return driver;
	}

	public void setDriver(AndroidDriver driver) {
		this.driver = driver;
	}
	
	public static OpApp getOp() {
		return opApp;
	}

	public static void setOp(OpApp opApp) {
		StartAndroidApp.opApp = opApp;
	}
	
	public AndroidAppLocator getLocator() {
		return locator;
	}

	public void setLocator(AndroidAppLocator locator) {
		this.locator = locator;
	}
	
	public void start() {
		//获取driver
		InitAndriodTest.StartAndroidApp();
		driver = InitAndriodTest.getDriver();
		Log.logInfo("初始化项目名称··············");
		projectName = TestngListener2.getProjectName();
		Log.logInfo("初始化项目成功··············");
		moduleName = GetModulemName();
		Log.logInfo("初始化locator对象··············");
//		locator = new AndroidAppLocator(driver, projectName + "/" + GetModulemName());// 初始化对象
		locator = new AndroidAppLocator(driver, projectName);
		Log.logInfo("初始化locator对象成功··············");
		opApp=new OpAndroid(driver, locator,projectName);
	}
	
	/**
	 * 获取当前测试类的项目名
	 * @return 以字符串形式，返回当前的测试类的项目名
	 * @author yuyang 创建时间:2016-09-20 更新时间:2016-09-20
	 */
	protected String GetModulemName() {
		String[] tmpName = GetClassName().split("\\.");
		String modulemName = "";
		if (tmpName.length > 1) {
			modulemName = tmpName[tmpName.length - 1];
		}
		return modulemName;
	}
	
	/**
	 * 初始化
	 * @param myProjectName
	 * @param configName
	 */
	public void init(String myProjectName, String configName) {
		
		PropUtil.GetProperties(myProjectName, configName);
		projectName = myProjectName;

	}
	
	/**
	 * 获取当前类名
	 * @return 以字符串形式，返回当前的类名
	 * @author yuyang 创建时间:2016-08-31 更新时间:2016-08-31
	 */
	protected String GetClassName() {
		String classnamestr = this.getClass().getName();
		return classnamestr;
	}
	
	/**
	 * 获取上一级的方法名
	 * @return 以字符串形式，返回上一级的方法名
	 * @author yuyang 创建时间:2016-08-31 更新时间:2016-08-31
	 */
	protected String GetMethodName() {
		String methodnamestr = Thread.currentThread().getStackTrace()[2].getMethodName();
		return methodnamestr;
	}
	
}
